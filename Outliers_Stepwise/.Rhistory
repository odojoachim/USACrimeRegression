PctEmplManu + PctBSorMore + LandArea + PersPerFam + pctWPubAsst +
PersPerOccupHous + PctUnemployed, data = CrimeData[, c(-1,
-2, -3, -4)])
SForwSum <- summary(SForward)
# The best model with AIC of AIC=-8510.48 is
Stepwise <- lm(formula = ViolentCrimesPerPop ~ PctKids2Par + racePctWhite +
PctBornSameState + PctIlleg + PctPersDenseHous + PctHousOccup +
PctVacMore6Mos + pctWInvInc + PctHousOwnOcc + perCapInc +
MedOwnCostPctIncNoMtg + PctSpeakEnglOnly + racepctblack +
PersPerRentOccHous + NumImmig + NumUnderPov + PctHousNoPhone +
PctImmigRec10 + OwnOccMedVal + PctImmigRecent + PctTeen2Par +
PctForeignBorn + PctNotSpeakEnglWell + OtherPerCap + PctEmplManu +
PctBSorMore + PersPerFam + pctWPubAsst + PersPerOccupHous +
MedOwnCostPctInc, data = CrimeData[, c(-1, -2, -3, -4)])
StepwiseSum <- summary(Stepwise)
library(car)
VIF <- as.list(vif(Sback))
range(VIF)
VIF[4]
VIF[17]
library(car)
VIF <- as.list(vif(SForward))
range(VIF)
VIF[1]
VIF[28]
library(car)
VIF <- as.list(vif(Stepwise))
range(VIF)
VIF[1]
VIF[15]
library(plyr)
library(ggplot2)
library(data.table)
SbackCoef <- as.data.frame(SbackSum$coefficients[,1])
SForwCoef <- as.data.frame(SForwSum$coefficients[,1])
SStepCoef <- as.data.frame(StepwiseSum$coefficients[,1])
mylist <- list(one = SbackCoef, two = SForwCoef, three = SStepCoef)
for(i in 1:length(mylist)){
colnames(mylist[[i]]) <- paste0(names(mylist)[i], "_", colnames(mylist[[i]]))
mylist[[i]]$ROWNAMES <- rownames(mylist[[i]])
}
coef <- join_all(mylist, by = "ROWNAMES", type = "full")
coef <- data.frame(coef$ROWNAMES, coef$`two_SForwSum$coefficients[, 1]`, coef$`one_SbackSum$coefficients[, 1]`, coef$`three_StepwiseSum$coefficients[, 1]`)
rownames(coef) <- coef$ROWNAMES; coef$ROWNAMES <- NULL
colnames(coef) <- c("feature", "Sforw", "Sback", "SStep")
coef[is.na(coef)] <- 0
to_plot = melt(coef, id.vars = 'feature', variable.name = 'model', value.name = 'coefficient')
ggplot(to_plot, aes(x = feature, y = coefficient, fill = model)) +
coord_flip() +
geom_bar(stat = 'identity') +
facet_wrap(~model) +
theme(axis.text=element_text(size=6)) +
guides(fill = FALSE)
Values <- c(
SbackSum$sigma, # Backward residual standard error
SbackSum$r.squared, # Backward r-squared
SbackSum$adj.r.squared, # Backward R-squared adjusted
SbackSum$fstatistic[1], # Backward F-statistics
SForwSum$sigma,
SForwSum$r.squared,
SForwSum$adj.r.squared,
SForwSum$fstatistic[1],
StepwiseSum$sigma,
StepwiseSum$r.squared,
StepwiseSum$adj.r.squared,
StepwiseSum$fstatistic[1])
Method <- c(rep("Backwards", 4), rep("Forward", 4), rep("Stepwise", 4))
Output <- c("StandardErrorResiduals", "R-squared", "R-squaredAdj", "Fstatistics", "StandardErrorResiduals", "R-squared", "R-squaredAdj", "Fstatistics", "StandardErrorResiduals", "R-squared", "R-squaredAdj", "Fstatistics")
data.frame(Method, Output, Values)
CrimeData <- CrimeData[c(-324,-1644, -1648, -1655),]
modImpr_log <- lm(log(ViolentCrimesPerPop) ~ ., data = CrimeData[,c(-1,-2, -3, -4)])
summary(modImpr_log) # 0.5827
par(mfrow=c(1,2))
standarised <- rstandard(modImpr_log)  ## get standardised residuals
fitted <- modImpr_log$fitted.values
plot(x = fitted, y = standarised, main = "standarised residuals vs fitted values", col = "darkblue")
abline(h=0.25)
plot(modImpr_log, pch = 18, col = 'navyblue', ask = F, which = 2)
shapiro.test(CrimeData$ViolentCrimesPerPop)
par(mfrow = c(1,1))
plot(modImpr_log, which=4, col = 'navyblue')
cooksd <- cooks.distance(modImpr_log)
library(faraway)
3 * sqrt(var(log(CrimeData$ViolentCrimesPerPop)))
par(las=1, mfrow=c(1,1))
plot(residuals(modImpr_log), ylab="Residuals", main = "residuals vs order")
abline(h=0)
plot(residuals(modImpr_log)[-1986], residuals(modImpr_log)[-1], xlab=expression(hat(epsilon)[i]), ylab=expression(hat(epsilon)[i+1]), main = "residuals vs residuals")
library(car)
VIF <- as.list(vif(modImpr_log))
VIF <- data.frame(VIF$pctWWage, VIF$pctWSocSec, VIF$perCapInc, VIF$whitePerCap, VIF$PctRecImmig5, VIF$PctRecImmig8, VIF$PctRecImmig10, VIF$PersPerOccupHous, VIF$PctPersOwnOccup)
VIF
modImpr_log.inf <- influence(modImpr_log)
summary(modImpr_log.inf$hat)
Sum <- summary(modImpr_log)
stud <- residuals(modImpr_log)/(Sum$sigma*sqrt(1 - modImpr_log.inf$hat))
qqnorm(stud, ylab="Studentized Residuals")
abline(0,1)
modImpr_log <- lm(log(ViolentCrimesPerPop) ~ ., data = CrimeData[,c(-1,-2, -3, -4)])
# step(modImpr_log, direction = "backward")
# Step:  AIC=-1750.03
Sback <- lm(formula = log(ViolentCrimesPerPop) ~ householdsize + racepctblack + racePctWhite + racePctHisp + agePct12t29 + medIncome + pctWInvInc + pctWSocSec + pctWPubAsst + perCapInc + whitePerCap + OtherPerCap + HispPerCap + NumUnderPov + PctEmplManu + PctEmplProfServ + FemalePctDiv + PersPerFam + PctKids2Par + NumIlleg + PctIlleg + PctImmigRec10 + PctNotSpeakEnglWell + PctPersDenseHous + PctHousOccup + PctVacMore6Mos + PctWOFullPlumb + MedOwnCostPctIncNoMtg + PctBornSameState + LandArea + PopDens, data = CrimeData[, c(-1, -2, -3, -4)])
SbackSum <- summary(Sback)
FitStart <- lm(log(ViolentCrimesPerPop) ~ 1, data = CrimeData[,c(-1,-2, -3, -4)])
#  The AIC for the best model in forward selection is Step:  AIC=-1748.63
SForward <- lm(formula = log(ViolentCrimesPerPop) ~ PctKids2Par + PctPersDenseHous + racePctWhite + FemalePctDiv + pctWInvInc + PctBornSameState + householdsize + perCapInc + NumIlleg + PctIlleg + racePctHisp + pctWRetire + PctEmplManu + OtherPerCap + HispPerCap + racepctblack + pctWPubAsst + MedOwnCostPctIncNoMtg + PctHousOccup + PctVacMore6Mos + PctNotSpeakEnglWell + medIncome + pctWSocSec + agePct12t29 + LandArea + PctSameState85 + PersPerFam + PctEmplProfServ + NumUnderPov + PctWOFullPlumb + whitePerCap, data = CrimeData[, c(-1, -2, -3, -4)])
SForwSum <- summary(SForward)
# step(FitStart, direction = "both", scope = formula(modImpr_log))
# The best model with AIC of AIC=-1750.03 is
Stepwise <- lm(formula = log(ViolentCrimesPerPop) ~ PctKids2Par + PctPersDenseHous + racePctWhite + FemalePctDiv + pctWInvInc + PctBornSameState + householdsize + perCapInc + NumIlleg + PctIlleg + racePctHisp + PctEmplManu + OtherPerCap + HispPerCap + racepctblack + pctWPubAsst + MedOwnCostPctIncNoMtg + PctHousOccup + PctVacMore6Mos + PctNotSpeakEnglWell + medIncome + pctWSocSec + agePct12t29 + LandArea + PersPerFam + PctEmplProfServ + NumUnderPov + PctWOFullPlumb + whitePerCap + PctImmigRec10 + PopDens, data = CrimeData[, c(-1, -2, -3, -4)])
StepwiseSum <- summary(Stepwise)
Values <- c(
SbackSum$sigma, # Backward residual standard error
SbackSum$r.squared, # Backward r-squared
SbackSum$adj.r.squared, # Backward R-squared adjusted
SbackSum$fstatistic[1], # Backward F-statistics
SForwSum$sigma,
SForwSum$r.squared,
SForwSum$adj.r.squared,
SForwSum$fstatistic[1],
StepwiseSum$sigma,
StepwiseSum$r.squared,
StepwiseSum$adj.r.squared,
StepwiseSum$fstatistic[1])
Method <- c(rep("Backwards", 4), rep("Forward", 4), rep("Stepwise", 4))
Output <- c("StandardErrorResiduals", "R-squared", "R-squaredAdj", "Fstatistics", "StandardErrorResiduals", "R-squared", "R-squaredAdj", "Fstatistics", "StandardErrorResiduals", "R-squared", "R-squaredAdj", "Fstatistics")
data.frame(Method, Output, Values)
library(plyr)
library(ggplot2)
library(data.table)
SbackCoef <- as.data.frame(SbackSum$coefficients[,1])
SForwCoef <- as.data.frame(SForwSum$coefficients[,1])
SStepCoef <- as.data.frame(StepwiseSum$coefficients[,1])
mylist <- list(one = SbackCoef, two = SForwCoef, three = SStepCoef)
for(i in 1:length(mylist)){
colnames(mylist[[i]]) <- paste0(names(mylist)[i], "_", colnames(mylist[[i]]))
mylist[[i]]$ROWNAMES <- rownames(mylist[[i]])
}
coef <- join_all(mylist, by = "ROWNAMES", type = "full")
coef <- data.frame(coef$ROWNAMES, coef$`two_SForwSum$coefficients[, 1]`, coef$`one_SbackSum$coefficients[, 1]`, coef$`three_StepwiseSum$coefficients[, 1]`)
rownames(coef) <- coef$ROWNAMES; coef$ROWNAMES <- NULL
colnames(coef) <- c("feature", "Sforw", "Sback", "SStep")
coef[is.na(coef)] <- 0
to_plot = melt(coef, id.vars = 'feature', variable.name = 'model', value.name = 'coefficient')
ggplot(to_plot, aes(x = feature, y = coefficient, fill = model)) +
coord_flip() +
geom_bar(stat = 'identity') +
facet_wrap(~model) +
theme(axis.text=element_text(size=6)) +
guides(fill = FALSE)
library(readr)
CrimeData <- read_csv("CrimeMultivariateClean.csv")
set.seed(33)
split=0.70
data <- sample(2, nrow(CrimeData), replace = T, prob = c(0.7, 0.3))
tdat <- CrimeData[data==1,]
vdat = CrimeData[data==2,]
tdats <- as.data.frame(scale(tdat[,5:87]))
ViolentCrimesPerPop    =tdat$ViolentCrimesPerPop
library (ridge)
linRidgeMod <- linearRidge(ViolentCrimesPerPop ~ ., data = tdat[,5:87])
predicted <- predict(linRidgeMod, vdat)
compare <- cbind (actual=vdat$ViolentCrimesPerPop, predicted)
mean (apply(compare, 1, min)/apply(compare, 1, max)) # 0.63 accuracy
set.seed(389173367)
split=0.70
data <- sample(2, nrow(CrimeData), replace = T, prob = c(0.7, 0.3))
tdat <- CrimeData[data==1,]
vdat = CrimeData[data==2,]
tdats <- as.data.frame(scale(tdat[,5:87]))
ViolentCrimesPerPop    =tdat$ViolentCrimesPerPop
library(lars)
par(bg='white')
lasso<-lars(x=as.matrix(tdats),y=ViolentCrimesPerPop,type='lasso',trace=FALSE,normalize=TRUE,intercept=TRUE)
par(mfrow=c(1,1));plot(lasso)
set.seed(389173367)
cvlab<-sample(1:10, 1430,replace=TRUE)
table(cvlab)
svec<-seq(0,1,.05)
J<-length(svec)
lassolist<-list()
predtrain<-list()
MSEstore<-matrix(NA,J,10)
for(i in 1:10){
lassolist[[i]]<-lars(x=as.matrix(tdats)[cvlab!=i,],y=ViolentCrimesPerPop[cvlab!=i],type='lasso',trace=FALSE,normalize=TRUE,intercept=TRUE)
predtrain[[i]]<-fit<-predict.lars(object=lassolist[[i]],newx=tdats[cvlab==i,],s=svec,mode='fraction',type='fit')$fit
for(j in 1:J){
MSEstore[j,i]<-mean((predtrain[[i]][,j]-ViolentCrimesPerPop[cvlab==i])^2) #This computes MSE
}
}
meanMSE<-apply(MSEstore,1,mean)
stdMSE<-apply(MSEstore,1,sd)/sqrt(10)
plot(svec,meanMSE,ylim=c(0.01,0.03),pch=16,col=colors()[258],axes=FALSE,cex=1.2,
xlab='Shrinkage factor lambda',ylab='Mean square error',cex.lab=1.7,main='Average CV prediction error as a function of lambda')
axis(1,cex.axis=1.4,cex.axis=1.2)
axis(2,las=1,at=seq(0.01, 0.03,0.005),cex.axis=1.2)
lines(svec,meanMSE,lty=1,col=colors()[258])
for(i in 1:J)segments(svec[i],(meanMSE[i]-stdMSE[i]),svec[i],(meanMSE[i]+stdMSE[i]))
abline(h=(meanMSE+stdMSE)[18],lty=2)
points(svec[5],meanMSE[5],col='red',pch=15,cex=1.3)
legend(.35,0.03,legend=c('mean MSE','standard error (SE)','1 SE above lowest mean','chosen value of lambda'),
pch=c(16,NA,NA,15),col=c(colors()[258],1,1,'red'),cex=1.1,lty=c(1,1,2,NA))
predict.lars(lasso,s=.2,mode='fraction',type='coefficients')
vdats <- as.data.frame(scale(vdat[,5:87]))
yhat_v<-predict.lars(lasso,newx=vdats,s=.2,mode='fraction',type='fit')$fit
ViolentCrimesPerPop_v<-vdat$ViolentCrimesPerPop
mean( (yhat_v-ViolentCrimesPerPop_v)^2)
meanMSE<-apply(MSEstore,1,mean)
sort(meanMSE)
library(data.table)
library(glmnet)
library(ggplot2)
split=0.70
set.seed(33)
data <- sample(2, nrow(CrimeData), replace = T, prob = c(0.7, 0.3))
train_Crime <- CrimeData[data==1,]
test_Crime = CrimeData[data==2,]
fit.lasso <- glmnet(as.matrix(train_Crime[,5:87]), train_Crime$ViolentCrimesPerPop, family="gaussian", alpha=1)
fit.ridge <- glmnet(as.matrix(train_Crime[,5:87]), train_Crime$ViolentCrimesPerPop, family="gaussian", alpha=0)
fit.elnet <- glmnet(as.matrix(train_Crime[,5:87]), train_Crime$ViolentCrimesPerPop, family="gaussian", alpha=0.5)
cvfit1 <- cv.glmnet(as.matrix(train_Crime[,5:87]), train_Crime$ViolentCrimesPerPop, family="gaussian", alpha=1)
cvfit2 <- cv.glmnet(as.matrix(train_Crime[,5:87]), train_Crime$ViolentCrimesPerPop, family="gaussian", alpha=0)
cvfit3 <- cv.glmnet(as.matrix(train_Crime[,5:87]), train_Crime$ViolentCrimesPerPop, family="gaussian", alpha=0.5)
par(mfrow=c(3,2))
plot(cvfit1, main="LASSO") # we fit a model with MSE equal to 1
plot(fit.lasso, main = "LASSO") # plot of lasso trace
plot(cvfit2, main="Ridge") # We fit a model with MSE equal to 0
plot(fit.ridge, main = "Ridge") # plot of ridge trace
plot(cvfit3, main="Elastic Net") # we fit a model with MSE equal to 0.5
plot(fit.elnet, main = "Elastic Net") # plot of elastic net trace
set.seed(33)
fit.lasso <- cv.glmnet(as.matrix(train_Crime[,5:87]), train_Crime$ViolentCrimesPerPop, family="gaussian", alpha=1)
best_lambda = fit.lasso$lambda.1se
lasso_coef = fit.lasso$glmnet.fit$beta[,fit.lasso$glmnet.fit$lambda==best_lambda]
fit.elnet <- cv.glmnet(as.matrix(train_Crime[,5:87]), train_Crime$ViolentCrimesPerPop, family="gaussian", alpha=0.4)
best_lambda = fit.elnet$lambda.1se
elnet_coef = fit.elnet$glmnet.fit$beta[,fit.elnet$glmnet.fit$lambda==best_lambda]
fit.ridge <- cv.glmnet(as.matrix(train_Crime[,5:87]), train_Crime$ViolentCrimesPerPop, family="gaussian", alpha=1)
best_lambda = fit.ridge$lambda.1se
ridge_coef = fit.ridge$glmnet.fit$beta[,fit.ridge$glmnet.fit$lambda==best_lambda]
coef <- data.table(lasso = lasso_coef,
elnet = elnet_coef,
ridge = ridge_coef)
coef[,feature := names(ridge_coef)]
to_plot = melt(coef, id.vars = 'feature', variable.name = 'model', value.name = 'coefficient')
ggplot(to_plot, aes(x = feature, y = coefficient, fill = model)) +
coord_flip() +
geom_bar(stat = 'identity') +
facet_wrap(~model) +
theme(axis.text=element_text(size=6)) +
guides(fill = FALSE)
library(caret)
control <- trainControl(method='repeatedcv', number=10, repeats=3)
metric <- "Rsquared"
preProcess=c("center", "scale")
set.seed(33)
caret.elnet <- train(ViolentCrimesPerPop~racepctblack + racePctWhite + pctWInvInc +
FemalePctDiv + PctTeen2Par + PctKids2Par +PctIlleg +
PctNotSpeakEnglWell + PctPersDenseHous + PctHousOccup +
MedRentPctHousInc + PctBornSameState + PctSameHouse85,
data=CrimeData, method="enet", metric=metric, preProc=c("center",
"scale"),
trControl=control)
caret.ridge <- train(ViolentCrimesPerPop~racepctblack + racePctWhite + pctWInvInc +
FemalePctDiv + PctTeen2Par + PctKids2Par +PctIlleg +
PctNotSpeakEnglWell + PctPersDenseHous + PctHousOccup +
MedRentPctHousInc + PctBornSameState + PctSameHouse85,
data=CrimeData,
method="ridge", metric=metric, preProc=c("center", "scale"),
trControl=control)
caret.lasso <- train(ViolentCrimesPerPop~racepctblack + racePctWhite + pctWInvInc +
FemalePctDiv + PctTeen2Par + PctKids2Par +PctIlleg +
PctNotSpeakEnglWell + PctPersDenseHous + PctHousOccup +
MedRentPctHousInc + PctBornSameState + PctSameHouse85,
data=CrimeData, method="lasso", metric=metric, preProc=c("center",
"scale"),
trControl=control)
results <- resamples(list(elnet=caret.elnet, ridge=caret.ridge, lasso=caret.lasso))
summary(results)
library(png)
library(grid)
img <- readPNG("C:/Users/fajlh/Desktop/Advanced Statistics Project/NA/ImportancePattern.png")
grid.raster(img)
library(readr)
CrimeData <- read_csv("CrimeMultivariateClean.csv")
CrimeData$state <- as.factor(CrimeData$state)
CrimeData$communityname <- as.factor(CrimeData$communityname)
library(png)
library(grid)
img <- readPNG("C:/Users/fajlh/Desktop/Advanced Statistics Project/Gauge.png")
grid.raster(img)
library(psych)
describe(CrimeData$ViolentCrimesPerPop)
library(pastecs)
stat.desc(CrimeData$ViolentCrimesPerPop, basic = FALSE)
ANOVA1WAY <- aov(ViolentCrimesPerPop~state, data = CrimeData)
summary(ANOVA1WAY)
library(png)
library(grid)
img <- readPNG("C:/Users/fajlh/Desktop/Advanced Statistics Project/map.png")
grid.raster(img)
library(psych)
describe(CrimeData$population)
library(pastecs)
stat.desc(CrimeData$population, basic = FALSE)
ANOVA1WAY <- aov(population~state, data = CrimeData)
summary(ANOVA1WAY)
library(psych)
describe(CrimeData$householdsize)
library(pastecs)
stat.desc(CrimeData$householdsize, basic = FALSE)
ANOVA1WAY <- aov(householdsize~state, data = CrimeData)
summary(ANOVA1WAY)
is_outlier <- function(x) {
return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))
}
library(ggplot2)
library(dplyr)
CrimeData %>%
group_by(state) %>%
mutate(outlier = ifelse(is_outlier(householdsize), population, as.numeric(NA))) %>%
ggplot(., aes(x = state, y = householdsize, fill = state)) +
geom_boxplot(colour = "black", alpha = 0.7, outlier.shape = 20) +
scale_y_continuous(name = "Number of Urban areas scaled for each state",
breaks = seq(-0.4, 1, 0.1),
limits=c(-0.4, 1)) +
scale_x_discrete(name = "States") +
ggtitle("Boxplot of household size for different states") +
theme(legend.position = "none",
legend.background = element_rect(fill = "lightgreen", size = 0.5, linetype = "solid"),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.text=element_text(size=6)) +
geom_text(aes(x =state, y = householdsize,
label = state, group = state),
position = position_dodge(width = 1),
vjust = -0.5,
size = 2,
check_overlap = T)
layout(matrix(c(2, 0, 1, 3), nrow = 2, byrow = TRUE), widths = c(2, 1), heights = c(1, 2), respect = TRUE)
xlim <- with(CrimeData, range(ViolentCrimesPerPop)) * 1.1
plot(racePctWhite  ~ ViolentCrimesPerPop, data = CrimeData, cex.lab = 0.9,
xlab = 'states', ylab = 'violenct crimes', type = "n", xlim = xlim)
with(CrimeData, text(ViolentCrimesPerPop, racePctWhite , cex = 0.6,
labels = abbreviate(row.names(CrimeData))))
with(CrimeData, hist(ViolentCrimesPerPop, main = "", xlim = xlim))
with(CrimeData, boxplot(racePctWhite ))
library(psych)
describe(CrimeData$racePctWhite)
library(pastecs)
stat.desc(CrimeData$racePctWhite, basic = FALSE)
ANOVA1WAY <- aov(racePctWhite~state, data = CrimeData)
summary(ANOVA1WAY)
CrimeData %>%
group_by(state) %>%
ggplot(., mapping = aes(x=state, y=numbUrban, colour = state)) +
geom_point(size = 0.5, colour = "black") +
geom_line() +
xlab("states") + ylab("number of urban regions in a given state") +
ggtitle("proportion of urban cities and towns in a given state") +
theme(legend.position = "top",
legend.background = element_rect(fill = "lightgreen", size = 1, linetype = "solid"),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.text=element_text(size=6))
library(psych)
describe(CrimeData$numbUrban)
library(pastecs)
stat.desc(CrimeData$numbUrban, basic = FALSE)
ANOVA1WAY <- aov(numbUrban~state, data = CrimeData)
summary(ANOVA1WAY)
par(mfrow=c(1,1))
library(dplyr)
library(ggplot2)
is_outlier <- function(x) {
return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))
}
CrimeData %>%
group_by(state) %>%
mutate(outlier = ifelse(is_outlier(PctSpeakEnglOnly), PctSpeakEnglOnly, as.numeric(NA))) %>%
ggplot(., aes(x = state, y = PctSpeakEnglOnly, fill = state)) +
geom_boxplot(colour = "black", alpha = 0.7, outlier.shape = 20) +
scale_y_continuous(name = "PctSpeakEnglOnly scaled for each state",
breaks = seq(-0.4, 1, 0.1),
limits=c(-0.4, 1)) +
scale_x_discrete(name = "PctSpeakEnglOnly") +
ggtitle("Boxplot of PctSpeakEnglOnly for different states") +
theme(legend.position = c(0.1,0.2),
legend.background = element_rect(fill = "lightgreen", size = 0.5, linetype = "solid")) +
geom_text(aes(x =state, y = PctSpeakEnglOnly,
label = state, group = state),
position = position_dodge(width = 1),
vjust = -0.5,
size = 2,
check_overlap = T)
library(psych)
describe(CrimeData$PctSpeakEnglOnly)
library(pastecs)
stat.desc(CrimeData$PctSpeakEnglOnly, basic = FALSE)
ANOVA1WAY <- aov(PctSpeakEnglOnly~state, data = CrimeData)
summary(ANOVA1WAY)
CrimeData %>%
group_by(state) %>%
mutate(outlier = ifelse(is_outlier(NumImmig), NumImmig, as.numeric(NA))) %>%
ggplot(., aes(x = state, y = NumImmig, fill = state)) +
geom_boxplot(colour = "black", alpha = 0.7, outlier.shape = 20) +
scale_y_continuous(name = "NumImmig scaled for each state",
breaks = seq(-0.4, 1, 0.1),
limits=c(-0.4, 1)) +
scale_x_discrete(name = "NumImmig") +
ggtitle("Boxplot of NumImmig for different states") +
theme(legend.position = "none",
legend.background = element_rect(fill = "lightgreen", size = 0.5, linetype = "solid"),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
geom_text(aes(x =state, y = NumImmig,
label = state, group = state),
position = position_dodge(width = 1),
vjust = -0.5,
size = 2,
check_overlap = T)
library(psych)
describe(CrimeData$NumImmig)
library(pastecs)
stat.desc(CrimeData$NumImmig, basic = FALSE)
ANOVA1WAY <- aov(NumImmig~state, data = CrimeData)
summary(ANOVA1WAY)
qqnorm(CrimeData$ViolentCrimesPerPop, main='Violent Crimes')
qqline(CrimeData$ViolentCrimesPerPop)
library(readr)
Texas <- read_csv("Texas.csv")
Texas$Education <- ifelse(is.na(Texas$Education), mean(Texas$Education, na.rm = TRUE), Texas$Education)
Texas$Occupation <- ifelse(is.na(Texas$Occupation), "Miss", as.character(Texas$Occupation))
Texas$Education <- round(Texas$Education)
Texas$Occupation <- as.factor(Texas$Occupation)
Texas$Occupation <- as.factor(Texas$Occupation)
Texas$Gender <- as.factor(Texas$Gender)
Texas$Race <- as.factor(Texas$Race)
Texas$County <- as.factor(Texas$County)
Texas$Birth <- as.ts(Texas$Birth)
Texas$Received <- as.ts(Texas$Received)
Texas$Offense <- as.ts(Texas$Offense)
Texas$TotalViolence <- as.numeric(Texas$TotalViolence)
summary(Texas[,c(4,5,6,8,9,10,33)])
sort(colSums(Texas[,13:32]))
library(ggplot2)
p1 <- ggplot(data = Texas, aes(x=Age))
p1+geom_bar(position = 'stack', aes(fill = Race), colour = 'black') + theme(legend.position="bottom") + ggtitle("Criminal race for different age")
p3 <- ggplot(data = Texas, aes(x=Education))
p3 + geom_histogram(binwidth =1, aes(fill = County), colour = 'Black') + theme(legend.position = c(0.15, 0.7)) +ggtitle("Education level per given County")
FrequencyTable <- with(Texas, table(Age, TotalViolence))
FrequencyTable <- as.data.frame(FrequencyTable)
FrequencyTable <- FrequencyTable[FrequencyTable$Freq>0,]
Prob = FrequencyTable$Freq/sum(FrequencyTable$Freq)
FrequencyTable <- data.frame(FrequencyTable, Prob)
colnames(FrequencyTable) <- c('Age', 'TotalViolence', 'Frequency', 'Probability')
FrequencyTable
library(reshape2)
MarginalTable <- FrequencyTable[,1:3]
MarginalTable <- recast(MarginalTable, TotalViolence~Age,id.var = 1:2)
MarginalTable[is.na(MarginalTable)] <- 0
MarginalTable
FrequencyTable2 <- FrequencyTable[,-3]
ProbabilityTable <- recast(FrequencyTable2, TotalViolence~Age,id.var = 1:2)
ProbabilityTable[is.na(ProbabilityTable)] <- 0
ProbabilityTable
MarginalProbability <- ProbabilityTable[,-1]
MarginalProbability["Total" ,] <- colSums(MarginalProbability)
MarginalProbability[,"Total"] <- rowSums(MarginalProbability)
round(MarginalProbability, 3)
Texas$Age <- as.factor(Texas$Age)
Texas$Education <- as.factor(Texas$Education)
Texas$TotalViolence <- as.factor(Texas$TotalViolence)
library(caret)
library(klaR)
split=0.70
NB_crime = Texas[,c('Age', 'Education', 'Occupation', 'Gender', 'Race', 'County', 'TotalViolence')]
set.seed(66785)
data <- sample(2, nrow(NB_crime), replace = T, prob = c(0.7, 0.4))
train_Crime <- NB_crime[data==1,]
test_Crime = NB_crime[data==2,]
table(train_Crime$TotalViolence)
table(test_Crime$TotalViolence)
library(e1071)
set.seed(66785)
e1071model <- naiveBayes(TotalViolence~Age + Education + Occupation + Race + Gender + County, train_Crime, na.action = na.omit)
e1071model
set.seed(66785)
e1071prediction <- predict(e1071model, test_Crime, na.action = na.omit)
result <- caret::confusionMatrix(table(e1071prediction, test_Crime$TotalViolence))
result$overall
modImpr_log <- lm(log(ViolentCrimesPerPop) ~ ., data = CrimeData[,c(-1,-2, -3, -4)])
# step(modImpr_log, direction = "backward")
# Step:  AIC=-1750.03
Sback <- lm(formula = log(ViolentCrimesPerPop) ~ householdsize + racepctblack + racePctWhite + racePctHisp + agePct12t29 + medIncome + pctWInvInc + pctWSocSec + pctWPubAsst + perCapInc + whitePerCap + OtherPerCap + HispPerCap + NumUnderPov + PctEmplManu + PctEmplProfServ + FemalePctDiv + PersPerFam + PctKids2Par + NumIlleg + PctIlleg + PctImmigRec10 + PctNotSpeakEnglWell + PctPersDenseHous + PctHousOccup + PctVacMore6Mos + PctWOFullPlumb + MedOwnCostPctIncNoMtg + PctBornSameState + LandArea + PopDens, data = CrimeData[, c(-1, -2, -3, -4)])
SbackSum <- summary(Sback)
FitStart <- lm(log(ViolentCrimesPerPop) ~ 1, data = CrimeData[,c(-1,-2, -3, -4)])
#  The AIC for the best model in forward selection is Step:  AIC=-1748.63
SForward <- lm(formula = log(ViolentCrimesPerPop) ~ PctKids2Par + PctPersDenseHous + racePctWhite + FemalePctDiv + pctWInvInc + PctBornSameState + householdsize + perCapInc + NumIlleg + PctIlleg + racePctHisp + pctWRetire + PctEmplManu + OtherPerCap + HispPerCap + racepctblack + pctWPubAsst + MedOwnCostPctIncNoMtg + PctHousOccup + PctVacMore6Mos + PctNotSpeakEnglWell + medIncome + pctWSocSec + agePct12t29 + LandArea + PctSameState85 + PersPerFam + PctEmplProfServ + NumUnderPov + PctWOFullPlumb + whitePerCap, data = CrimeData[, c(-1, -2, -3, -4)])
SForwSum <- summary(SForward)
# step(FitStart, direction = "both", scope = formula(modImpr_log))
# The best model with AIC of AIC=-1750.03 is
Stepwise <- lm(formula = log(ViolentCrimesPerPop) ~ PctKids2Par + PctPersDenseHous + racePctWhite + FemalePctDiv + pctWInvInc + PctBornSameState + householdsize + perCapInc + NumIlleg + PctIlleg + racePctHisp + PctEmplManu + OtherPerCap + HispPerCap + racepctblack + pctWPubAsst + MedOwnCostPctIncNoMtg + PctHousOccup + PctVacMore6Mos + PctNotSpeakEnglWell + medIncome + pctWSocSec + agePct12t29 + LandArea + PersPerFam + PctEmplProfServ + NumUnderPov + PctWOFullPlumb + whitePerCap + PctImmigRec10 + PopDens, data = CrimeData[, c(-1, -2, -3, -4)])
StepwiseSum <- summary(Stepwise)
VIF <- as.list(vif(Sback))
range(VIF)
VIF
VIF <- as.list(vif(SForward))
range(VIF)
VIF <- as.list(vif(Stepwise))
range(VIF)
setwd("C:/Users/fajlh/Documents/USB stick/statistics/GitProject/Outliers_Stepwise")
